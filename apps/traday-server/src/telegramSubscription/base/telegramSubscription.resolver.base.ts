/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TelegramSubscription } from "./TelegramSubscription";
import { TelegramSubscriptionCountArgs } from "./TelegramSubscriptionCountArgs";
import { TelegramSubscriptionFindManyArgs } from "./TelegramSubscriptionFindManyArgs";
import { TelegramSubscriptionFindUniqueArgs } from "./TelegramSubscriptionFindUniqueArgs";
import { CreateTelegramSubscriptionArgs } from "./CreateTelegramSubscriptionArgs";
import { UpdateTelegramSubscriptionArgs } from "./UpdateTelegramSubscriptionArgs";
import { DeleteTelegramSubscriptionArgs } from "./DeleteTelegramSubscriptionArgs";
import { User } from "../../user/base/User";
import { TelegramSubscriptionService } from "../telegramSubscription.service";
@graphql.Resolver(() => TelegramSubscription)
export class TelegramSubscriptionResolverBase {
  constructor(protected readonly service: TelegramSubscriptionService) {}

  async _telegramSubscriptionsMeta(
    @graphql.Args() args: TelegramSubscriptionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TelegramSubscription])
  async telegramSubscriptions(
    @graphql.Args() args: TelegramSubscriptionFindManyArgs
  ): Promise<TelegramSubscription[]> {
    return this.service.telegramSubscriptions(args);
  }

  @graphql.Query(() => TelegramSubscription, { nullable: true })
  async telegramSubscription(
    @graphql.Args() args: TelegramSubscriptionFindUniqueArgs
  ): Promise<TelegramSubscription | null> {
    const result = await this.service.telegramSubscription(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TelegramSubscription)
  async createTelegramSubscription(
    @graphql.Args() args: CreateTelegramSubscriptionArgs
  ): Promise<TelegramSubscription> {
    return await this.service.createTelegramSubscription({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TelegramSubscription)
  async updateTelegramSubscription(
    @graphql.Args() args: UpdateTelegramSubscriptionArgs
  ): Promise<TelegramSubscription | null> {
    try {
      return await this.service.updateTelegramSubscription({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TelegramSubscription)
  async deleteTelegramSubscription(
    @graphql.Args() args: DeleteTelegramSubscriptionArgs
  ): Promise<TelegramSubscription | null> {
    try {
      return await this.service.deleteTelegramSubscription(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: TelegramSubscription
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
