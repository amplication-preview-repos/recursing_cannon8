/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TelegramSubscriptionService } from "../telegramSubscription.service";
import { TelegramSubscriptionCreateInput } from "./TelegramSubscriptionCreateInput";
import { TelegramSubscription } from "./TelegramSubscription";
import { TelegramSubscriptionFindManyArgs } from "./TelegramSubscriptionFindManyArgs";
import { TelegramSubscriptionWhereUniqueInput } from "./TelegramSubscriptionWhereUniqueInput";
import { TelegramSubscriptionUpdateInput } from "./TelegramSubscriptionUpdateInput";

export class TelegramSubscriptionControllerBase {
  constructor(protected readonly service: TelegramSubscriptionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TelegramSubscription })
  async createTelegramSubscription(
    @common.Body() data: TelegramSubscriptionCreateInput
  ): Promise<TelegramSubscription> {
    return await this.service.createTelegramSubscription({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        isActive: true,
        subscriptionDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TelegramSubscription] })
  @ApiNestedQuery(TelegramSubscriptionFindManyArgs)
  async telegramSubscriptions(
    @common.Req() request: Request
  ): Promise<TelegramSubscription[]> {
    const args = plainToClass(TelegramSubscriptionFindManyArgs, request.query);
    return this.service.telegramSubscriptions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        isActive: true,
        subscriptionDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TelegramSubscription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async telegramSubscription(
    @common.Param() params: TelegramSubscriptionWhereUniqueInput
  ): Promise<TelegramSubscription | null> {
    const result = await this.service.telegramSubscription({
      where: params,
      select: {
        createdAt: true,
        id: true,
        isActive: true,
        subscriptionDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TelegramSubscription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTelegramSubscription(
    @common.Param() params: TelegramSubscriptionWhereUniqueInput,
    @common.Body() data: TelegramSubscriptionUpdateInput
  ): Promise<TelegramSubscription | null> {
    try {
      return await this.service.updateTelegramSubscription({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          isActive: true,
          subscriptionDate: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TelegramSubscription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTelegramSubscription(
    @common.Param() params: TelegramSubscriptionWhereUniqueInput
  ): Promise<TelegramSubscription | null> {
    try {
      return await this.service.deleteTelegramSubscription({
        where: params,
        select: {
          createdAt: true,
          id: true,
          isActive: true,
          subscriptionDate: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
