/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TradingSignalService } from "../tradingSignal.service";
import { TradingSignalCreateInput } from "./TradingSignalCreateInput";
import { TradingSignal } from "./TradingSignal";
import { TradingSignalFindManyArgs } from "./TradingSignalFindManyArgs";
import { TradingSignalWhereUniqueInput } from "./TradingSignalWhereUniqueInput";
import { TradingSignalUpdateInput } from "./TradingSignalUpdateInput";

export class TradingSignalControllerBase {
  constructor(protected readonly service: TradingSignalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TradingSignal })
  async createTradingSignal(
    @common.Body() data: TradingSignalCreateInput
  ): Promise<TradingSignal> {
    return await this.service.createTradingSignal({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        price: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TradingSignal] })
  @ApiNestedQuery(TradingSignalFindManyArgs)
  async tradingSignals(
    @common.Req() request: Request
  ): Promise<TradingSignal[]> {
    const args = plainToClass(TradingSignalFindManyArgs, request.query);
    return this.service.tradingSignals({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        price: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TradingSignal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tradingSignal(
    @common.Param() params: TradingSignalWhereUniqueInput
  ): Promise<TradingSignal | null> {
    const result = await this.service.tradingSignal({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        price: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TradingSignal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTradingSignal(
    @common.Param() params: TradingSignalWhereUniqueInput,
    @common.Body() data: TradingSignalUpdateInput
  ): Promise<TradingSignal | null> {
    try {
      return await this.service.updateTradingSignal({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          price: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TradingSignal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTradingSignal(
    @common.Param() params: TradingSignalWhereUniqueInput
  ): Promise<TradingSignal | null> {
    try {
      return await this.service.deleteTradingSignal({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          price: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
