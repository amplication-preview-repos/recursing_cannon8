/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TradingSignal as PrismaTradingSignal } from "@prisma/client";

export class TradingSignalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TradingSignalCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tradingSignal.count(args);
  }

  async tradingSignals(
    args: Prisma.TradingSignalFindManyArgs
  ): Promise<PrismaTradingSignal[]> {
    return this.prisma.tradingSignal.findMany(args);
  }
  async tradingSignal(
    args: Prisma.TradingSignalFindUniqueArgs
  ): Promise<PrismaTradingSignal | null> {
    return this.prisma.tradingSignal.findUnique(args);
  }
  async createTradingSignal(
    args: Prisma.TradingSignalCreateArgs
  ): Promise<PrismaTradingSignal> {
    return this.prisma.tradingSignal.create(args);
  }
  async updateTradingSignal(
    args: Prisma.TradingSignalUpdateArgs
  ): Promise<PrismaTradingSignal> {
    return this.prisma.tradingSignal.update(args);
  }
  async deleteTradingSignal(
    args: Prisma.TradingSignalDeleteArgs
  ): Promise<PrismaTradingSignal> {
    return this.prisma.tradingSignal.delete(args);
  }
}
