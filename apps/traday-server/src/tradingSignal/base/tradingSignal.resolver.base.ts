/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TradingSignal } from "./TradingSignal";
import { TradingSignalCountArgs } from "./TradingSignalCountArgs";
import { TradingSignalFindManyArgs } from "./TradingSignalFindManyArgs";
import { TradingSignalFindUniqueArgs } from "./TradingSignalFindUniqueArgs";
import { CreateTradingSignalArgs } from "./CreateTradingSignalArgs";
import { UpdateTradingSignalArgs } from "./UpdateTradingSignalArgs";
import { DeleteTradingSignalArgs } from "./DeleteTradingSignalArgs";
import { TradingSignalService } from "../tradingSignal.service";
@graphql.Resolver(() => TradingSignal)
export class TradingSignalResolverBase {
  constructor(protected readonly service: TradingSignalService) {}

  async _tradingSignalsMeta(
    @graphql.Args() args: TradingSignalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TradingSignal])
  async tradingSignals(
    @graphql.Args() args: TradingSignalFindManyArgs
  ): Promise<TradingSignal[]> {
    return this.service.tradingSignals(args);
  }

  @graphql.Query(() => TradingSignal, { nullable: true })
  async tradingSignal(
    @graphql.Args() args: TradingSignalFindUniqueArgs
  ): Promise<TradingSignal | null> {
    const result = await this.service.tradingSignal(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TradingSignal)
  async createTradingSignal(
    @graphql.Args() args: CreateTradingSignalArgs
  ): Promise<TradingSignal> {
    return await this.service.createTradingSignal({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TradingSignal)
  async updateTradingSignal(
    @graphql.Args() args: UpdateTradingSignalArgs
  ): Promise<TradingSignal | null> {
    try {
      return await this.service.updateTradingSignal({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TradingSignal)
  async deleteTradingSignal(
    @graphql.Args() args: DeleteTradingSignalArgs
  ): Promise<TradingSignal | null> {
    try {
      return await this.service.deleteTradingSignal(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
